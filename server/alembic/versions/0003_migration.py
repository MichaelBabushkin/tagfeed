"""0003_migration

Revision ID: cd35b62ac6e9
Revises: d569340cf589
Create Date: 2024-03-02 08:58:35.069271

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cd35b62ac6e9'
down_revision = 'd569340cf589'
branch_labels = None
depends_on = None

itemstatus = postgresql.ENUM('SAVING', 'CREATED', 'FAILED', name="itemstatus")

old_options = ("STRING", "LINK", "NOT_DEFINED")
new_options = sorted(("TEXT", "NOT_DEFINED", "IMAGE"))
all_options = old_options + ("TEXT", "IMAGE")
old_type = sa.Enum(*old_options, name="itemtypes")
new_type = sa.Enum(*new_options, name="itemtypes")
tmp_type = sa.Enum(*all_options, name="_itemtypes")
tcr = sa.sql.table("items", sa.Column("item_type", new_type, nullable=False))

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    itemstatus.create(op.get_bind())
    op.add_column(
        "items",
        sa.Column(
            "status",
            sa.Enum('SAVING', 'CREATED', 'FAILED', name="itemstatus"),
            server_default="CREATED",
            nullable=False,
        ),
    )
    op.add_column('items', sa.Column('content_uuid', sa.UUID(), nullable=True))
    op.add_column('items', sa.Column('preview_uuid', sa.UUID(), nullable=True))
    op.alter_column('items', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('items', 'preview')
    op.alter_column("items", "content", new_column_name="item_text")
    op.alter_column('items_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users_tags', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    # Create a tempoary "_itemtypes" type, convert and drop the "old" type
    tmp_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE items ALTER COLUMN item_type TYPE _itemtypes"
        " USING item_type::text::_itemtypes"
    )
    # Update "STRING" and "LINK" types to "TEXT"
    op.execute(
        tcr.update()
        .where(tcr.c.item_type.in_(["STRING", "LINK"]))
        .values(item_type="TEXT")
    )
    old_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" itemtypes types
    new_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE items ALTER COLUMN item_type TYPE itemtypes"
        " USING item_type::text::itemtypes"
    )
    tmp_type.drop(op.get_bind(), checkfirst=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users_tags', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('items_tags', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column("items", "item_text", new_column_name="content")
    op.add_column('items', sa.Column('preview', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.alter_column('items', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('items', 'preview_uuid')
    op.drop_column('items', 'content_uuid')
    op.drop_column('items', 'status')
    # Create a tempoary "_itemtypes" type, convert and drop the "new" types
    tmp_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE items ALTER COLUMN item_type TYPE _itemtypes"
        " USING item_type::text::_itemtypes"
    )
    itemstatus.drop(op.get_bind())
    op.execute(
        tcr.update()
        .where(tcr.c.item_type == "TEXT")
        .values(item_type="STRING")
    )
    op.execute(
        tcr.update()
        .where(tcr.c.item_type == "IMAGE")
        .values(item_type="NOT_DEFINED")
    )
    new_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "old" item_type type
    old_type.create(op.get_bind(), checkfirst=False)
    op.execute(
        "ALTER TABLE items ALTER COLUMN item_type TYPE itemtypes"
        " USING item_type::text::itemtypes"
    )
    tmp_type.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
